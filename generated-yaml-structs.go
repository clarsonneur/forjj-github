// This file is autogenerated by "go generate". Do not modify it.
// It has been generated from your 'github.yaml' file.
// To update those structure, update the 'github.yaml' and run 'go generate'
package main

import "github.com/forj-oss/goforjj"

type CreateReq struct {
    Args CreateArgReq `json:"args"`
    ReposData map[string]goforjj.PluginRepoData
}

type CreateArgReq struct {
    ForjjOrganization string `json:"forjj-organization"` // Default FORJJ Organization. Used by default as github organization. If you want different one, use --github-organization
    GithubOrganization string `json:"github-organization"` // Github Organization name. By default, it uses the FORJJ organization name
    GithubServer string `json:"github-server"` // Github Entreprise Server name. By default, public 'github.com' API is used.
    // common flags
    ForjjInfra string `json:"forjj-infra"` // Name of the Infra repository to use
    ForjjInstanceName string `json:"forjj-instance-name"` // Name of the jenkins instance given by forjj.
    ForjjSourceMount string `json:"forjj-source-mount"` // Where the source dir is located for github plugin.
    GithubDebug string `json:"github-debug"` // To activate github debug information
    GithubToken string `json:"github-token"` // github token to access. This token must authorize organization level access.
}

type UpdateReq struct {
    Args UpdateArgReq `json:"args"`
    ReposData map[string]goforjj.PluginRepoData
}

type UpdateArgReq struct {
    ForjjOrganization string `json:"forjj-organization"` // Default FORJJ Organization. Used by default as github organization. If you want different one, use --github-organization
    GithubOrganization string `json:"github-organization"` // Github Organization name. By default, it uses the FORJJ organization name
    GithubServer string `json:"github-server"` // Github Entreprise Server name. By default, public 'github.com' API is used.

    // common flags
    ForjjInfra string `json:"forjj-infra"` // Name of the Infra repository to use
    ForjjInstanceName string `json:"forjj-instance-name"` // Name of the jenkins instance given by forjj.
    ForjjSourceMount string `json:"forjj-source-mount"` // Where the source dir is located for github plugin.
    GithubDebug string `json:"github-debug"` // To activate github debug information
    GithubToken string `json:"github-token"` // github token to access. This token must authorize organization level access.
}

type MaintainReq struct {
    Args MaintainArgReq `json:"args"`
    ReposData map[string]goforjj.PluginRepoData
}

type MaintainArgReq struct {
    ForjjWorkspaceMount string `json:"forjj-workspace-mount"` // Where the workspace dir is located for github plugin.

    // common flags
    ForjjInfra string `json:"forjj-infra"` // Name of the Infra repository to use
    ForjjInstanceName string `json:"forjj-instance-name"` // Name of the jenkins instance given by forjj.
    ForjjSourceMount string `json:"forjj-source-mount"` // Where the source dir is located for github plugin.
    GithubDebug string `json:"github-debug"` // To activate github debug information
    GithubToken string `json:"github-token"` // github token to access. This token must authorize organization level access.
}

// Function which adds maintain options as part of the plugin answer in create/update phase.
// forjj won't add any driver name because 'maintain' phase read the list of drivers to use from forjj-maintain.yml
// So --git-us is not available for forjj maintain.
func (r *CreateArgReq)SaveMaintainOptions(ret *goforjj.PluginData) {
    if ret.Options == nil {
        ret.Options = make(map[string]goforjj.PluginOption)
    }

    ret.Options["github-token"] = addMaintainOptionValue(ret.Options, "github-token", r.GithubToken, "", "github token to access. This token must authorize organization level access.")
}

func (r *UpdateArgReq)SaveMaintainOptions(ret *goforjj.PluginData) {
    if ret.Options == nil {
        ret.Options = make(map[string]goforjj.PluginOption)
    }

    ret.Options["github-token"] = addMaintainOptionValue(ret.Options, "github-token", r.GithubToken, "", "github token to access. This token must authorize organization level access.")
}

func addMaintainOptionValue(options map[string]goforjj.PluginOption, option, value, defaultv, help string) (goforjj.PluginOption){
    opt, ok := options[option]
    if ok && value != "" {
        opt.Value = value
        return opt
    }
    if ! ok {
        opt = goforjj.PluginOption { Help: help }
        if value == "" {
            opt.Value = defaultv
        } else {
            opt.Value = value
        }
    }
    return opt
}

// YamlDesc has been created from your 'github.yaml' file.
const YamlDesc="---\n" +
   "plugin: \"github\"\n" +
   "version: \"0.1\"\n" +
   "description: \"Upstream github plugin for FORJJ. It properly configure github.com or entreprise with organisation/repos\"\n" +
   "runtime:\n" +
   "  docker:\n" +
   "    image: \"hub.docker.hpecorp.net/devops/forjj-github\"\n" +
   "  service_type: \"REST API\"\n" +
   "  service:\n" +
   "    #socket: \"github.sock\"\n" +
   "    parameters: [ \"service\", \"start\" ]\n" +
   "created_flag_file: \"{{ .InstanceName }}/{{.Name}}.yaml\"\n" +
   "actions:\n" +
   " common:\n" +
   "   flags:\n" +
   "     forjj-infra:\n" +
   "       help: \"Name of the Infra repository to use\"\n" +
   "     github-debug:\n" +
   "       help: \"To activate github debug information\"\n" +
   "     forjj-source-mount:\n" +
   "       help: \"Where the source dir is located for github plugin.\"\n" +
   "     forjj-instance-name:\n" +
   "        help: \"Name of the jenkins instance given by forjj.\"\n" +
   "     github-token:\n" +
   "       help: \"github token to access. This token must authorize organization level access.\"\n" +
   "       required: true\n" +
   "       secure: true\n" +
   " create:\n" +
   "   help: \"Create the github environment to manage source and infra code.\"\n" +
   "   flags:\n" +
   "     github-server:\n" +
   "       help: \"Github Entreprise Server name. By default, public 'github.com' API is used.\"\n" +
   "     forjj-organization:\n" +
   "       help: \"Default FORJJ Organization. Used by default as github organization. If you want different one, use --github-organization\"\n" +
   "     github-organization:\n" +
   "       help: \"Github Organization name. By default, it uses the FORJJ organization name\"\n" +
   " update:\n" +
   "   help: \"Update the github infrastructure in the infra repository.\"\n" +
   "   flags:\n" +
   "     github-server:\n" +
   "       help: \"Github Entreprise Server name. By default, public 'github.com' API is used.\"\n" +
   "     forjj-organization:\n" +
   "       help: \"Default FORJJ Organization. Used by default as github organization. If you want different one, use --github-organization\"\n" +
   "     github-organization:\n" +
   "       help: \"Github Organization name. By default, it uses the FORJJ organization name\"\n" +
   " maintain:\n" +
   "   help: \"Maintain github infrastructure from the infra repository\"\n" +
   "   flags:\n" +
   "     forjj-workspace-mount:\n" +
   "       help: \"Where the workspace dir is located for github plugin.\"\n" +
   ""

